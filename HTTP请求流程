shan1. HTTP是一种允许浏览器向服务器获取资源的协议，是Web的基础。HTTP也是浏览器使用最广的协议
2. 问题： 为什么通常在第一次访问一个站点时，打开速度很慢，再次访问就快了
         为什么登陆过一个网站之后，下次在访问这个站点，就已经处于登录状态了？
3. 浏览器发起HTTP请求流程
   在浏览器地址栏里输入王者，接下来的流程：
   （1）构建请求
       浏览器构建请求行信息，构建好后准备发起网络请求
   （2）查找缓存
       在发请求之前，浏览器会先在浏览器缓存中查询是否又要请求的文件
       浏览器缓存是一种在本地保存资源副本，以供下次请求时直接使用的技术
       若已经有缓存，会拦截请求，返回该资源的副本，并直接结束请求，而不会再去源服务器重新下载
       优点： 缓解服务器压力，提升性能。对于网站来说，缓存是实现快速资源加载的重要组成部分
   （3）准备IP地址和端口
       HTTP和TCP协议的关系：
           HTTP协议作为应用层协议，用来封装请求信息
           使用TCP/IP作为传输层将它发到网络上。
           HTTP工作开始之前，浏览器需要通过TCP与服务器简历连接
           HTTP的内容是通过TCP的传输数据阶段来实现的
           HTTP请求的第一步是和服务器建立TCP连接
      由于网站的ip地址很难记忆，但是网站的域名很好记忆，所以出现了一个服务，负责把域名和IP地址做一一映射关系：叫做域名系统（DNS）
      所以第一步浏览器会请求DNS返回域名对应的IP
      当然浏览器还提供了DNS数据缓存服务，如果某个域名已经解析过了，浏览器就会缓存解析结果，下次再查询，就会减少一次网络请求
      拿到ip之后就要获取端口号，没有特别指明端口号的，HTTP协议默认80端口
4. 等待TCP队列
   chorme有个机制，同一个域名同时最多建立6个TCP连接，如果同一个域名下有10个请求，那么4个就会进入排队等待状态，直到进行中的请求完成
5. 建立TCP连接
   排队等待结束后，在HTTP工作之前，浏览器通过TCP与服务器建立连接
6. 发送HTTP请求
   建立了TCP连接，浏览器就可以和服务器通讯了
   HTTP中的数据就是在这个通信过程中传输的
   
   （1）首先浏览器会向服务器发送请求行，它包括了请求方法、请求URI和HTTP版本协议
        发送请求行，就是告诉服务器浏览器需要什么资源，最常用的请求方法是GET
        另一个常用的请求方法是POST，用于发送一些数据给服务器。如果使用POST方法，浏览器还要准备数据给服务器，这里准备的数据是通过请求体来发送
   （2）浏览器发送了请求行后，还要以请求头形式发送一些其他信息，把浏览器的一些基础信息告诉服务器，比如包含了浏览器所使用的的操作系统、浏览器内核等
       以及当前请求的域名信息、浏览器端的cookie信息等等
7. 服务器端处理HTTP请求流程
   服务器会根据浏览器的请求信息来准备相应的内容
   （1）返回请求 服务器处理完数据就可以返回数据给浏览器了
               首先服务器会返回相应行，包括协议版本和状态码，有一些请求无法处理或者处理出错，服务器会通过请求行的状态码来告诉浏览器它的处理结果
               然后服务器会随同响应向浏览器发送响应头，包含服务器自身的一些信息
               发送完响应头之后，服务器就可以继续发送响应体的数据
8. 断开连接
   一旦服务器向客户返回了请求数据，就要关闭TCP连接
   不过如果浏览器或者服务器在头信息中加入了connection： keep-alive，TCP连接在发送后将仍然保持打开状态
   保持TCP连接可以省去下次请求时需要建立连接的时间，提升资源加载速度
9. 重定向
   响应状态码301，就是要告诉浏览器，需要重新定向到另一个网址，而需要重定向的网址正是包含在响应头的location字段中
10. 服务器让浏览器缓存数据的方式
    DNS缓存：
    浏览器本地把对应的IP和域名关联起来
    页面资源缓存：
    当服务器返回HTTP响应头给浏览器时，浏览器是通过响应头中的Cache-Control字段来设置是否缓存该资源
    通常，还需要为它设置一个最长时长，通过cache-control
    如果缓存没过期，会直接返回缓存中的资源
    如果缓存过期了，浏览器则会继续发送网络请求，并且带上If-None-Match
    服务器收到请求头后，会根据If-None-Match的值来判断请求的资源是否更新
    如果没有更新，就返回304，告诉浏览器这个缓存可以继续用，这次就不重复发送数据给你了
    如果资源有更新，服务器直接返回最新资源给浏览器
11. 保持登陆态
    服务器收到浏览器post方法提交的用户登录的信息后，查询后台，验证用户登录信息是否正确，如果正确，会生成一段表示用户身份的字符串
    并把该字符串写到响应头的set-cookie字段里，然后把响应头发送给浏览器
    浏览器收到服务器的响应头后开始解析，遇到set-cookie字段，就会把这个字段信息保存到本地
    用户再次访问时，浏览器会发起HTTP请求，发请求之前，浏览器会读取之前保存的cookie，并把数据写进请求头里的cookie字段，然后浏览器再将请求头发给服务器
    服务器收到HTTP请求投数据之后，就会查找请求头里面的cookie字段，拿到uid并且查询后台，判断用户已经登录，然后生成含有该用户信息的数据，发送给浏览器
    浏览器在接收到该含有当前用户的页面数据后，就可以正确展示
   
   
   
   
   
   
   
