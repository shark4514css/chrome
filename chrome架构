1. 并行处理：同一时间处理多个任务
   使用并行处理能大大提升性能
2. 线程 VS 进程
   （1）多线程可以并行处理任务，但是线程是不能单独存在的，它是由进程来启动和管理的
   （2）一个进程就是一个程序的运行实例
   （3）启动一个程序的时候，操作系统会为该程序创建一块内存，用来存放代码、运行中的数据和一个执行任务的主线程，我们把这样的一个运行环境叫进程
   （4）线程是依附于进程的，而进程中使用多线程并行处理能提升运算效率
3. 进程和线程的关系：
   （1）进程中的任意一线程执行出错，都会导致整个进程的崩溃
   （2）线程之间共享进程中的数据
   （3）当一个进程关闭之后，操作系统会回收进程所占用的内存。即使其中任意线程因为操作不当导致内存泄露，当进程退出时，这些内存也会被正确回收
   （4）进程之间的内容相互隔离
4. 单进程浏览器时代
   单进程浏览器是指浏览器的所有功能模块都是运行再同一个进程里，包括网络、插件、js运行环境、渲染引擎和页面等
   缺点： 不稳定、不流畅、不安全
   不稳定： 早期浏览器需要借助插件实现各种强大功能，但是插件容易出问题，一个插件的崩溃就会导致整个浏览器的崩溃。
           除此之外，渲染引擎模块也不稳定，一些复杂的js代码就有可能引起渲染引擎的崩溃，进而导致整个浏览器的崩溃
   不流畅： 所有页面的渲染模块、js执行环境以及插件都是运行在同一个线程中（页面线程），同一时刻只能有一个模块执行，所以不流畅
           除此之外，页面内存泄露也是单进程变慢的一个重要原因。通常浏览器的内核非常复杂，运行一个复杂的页面在关闭，会存在内存不能完全回收的情况，
           导致内存占用越来越多，浏览器变慢
   不安全： 通过插件可以获取操作系统的任意资源，当你在页面运行一个插件时也就意味着这个插件可以完全操作你的电脑
           页面脚本也可以通过浏览器的漏洞获取系统权限，引发安全问题
5. 多进程浏览器时代
   早期多进程架构，早期chrome页面是运行在单独渲染进程中的，同时页面里的插件也是运行在单独进程中的，进程之间通过IPC机制进行通信
   解决了不稳定的问题： 一个页面或者一个插件崩溃，影响到的仅仅是当前的页面进程或者插件进程，并不会影响到浏览器和其他页面，完美解决了页面或者插件
                    的崩溃会导致整个浏览器崩溃，也就解决了不稳定的问题
   解决不流畅的问题： js也是运行在渲染进程中的，所以即使js阻塞了渲染进程，影响到的也是当前页面的渲染，不会影响浏览器和其他页面
                   当我们关闭一个页面的时候，整个渲染进程也会被关闭，之后该进程所占用的内存都会被系统回收，轻松解决浏览器页面的内存泄漏问题
   解决不安全的问题： 采用多进程架构的额外好处是可以使用安全沙箱，沙箱里面的程序可以运行，但是不能在硬盘上写入任何数据，也不能在敏感位置读取数据
   目前多进程架构
   最新的chrome浏览器包括一个浏览器主进程、一个GPU进程、一个网络进程、多个渲染进程和多个插件进程
   浏览器主进程：主要负责界面显示、用户交互、子进程管理，同时提供存储等功能
   渲染进程：核心任务是将html,css,js转换为用户可以与之交互的网页，排版引擎blick和javascript引擎V8
           在该进程中，默认情况下，chrome会为每个tab标签创建一个渲染进程。出于安全考虑，渲染进程都是运行在沙箱模式下
   GPU进程：GPU使用初衷是为了实现3D CSS效果。
           只是随后网页。chrome的UI界面都选择采用GPU来绘制，使得GPU成为浏览器普遍需求。最后chrome在多进程架构中也引入了GPU进程
   网络进程：主要负责页面的网络资源加载，之前是作为一个模块运行在浏览器进程里面的，直到最近才被独立出来。
   插件进程：主要负责插件的运行
6. 多进程浏览器的弊端
   更高的资源占用
   更复杂的体系架构
7. 补充： 几个页面符合同一站点，那么他们将被分配到一个渲染进程里面取，这种情况下，一个页面崩溃了，会导致同一站点的页面同时崩溃，因为他们使用了同一个渲染进程






